version: '3.8'

services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper1
  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper2
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper2:2182
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper2
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka1
    entrypoint: [ "sh", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...' &&
      sleep 20 &&
      kafka-topics --create --if-not-exists --topic refresh-properties --bootstrap-server kafka1:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic refresh-properties --bootstrap-server kafka2:9093 --partitions 1 --replication-factor 1
      "
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: sample
      MYSQL_ROOT_PASSWORD: rootpassword
    volumes:
      - db_data:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
  cloud-config-server1:
    build:
      context: ./cloud-config-server
    container_name: cloud-config-server1
    ports:
      - "8888:8888"
    depends_on:
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: local
      SERVER_PORT: 8888
    restart: on-failure:10

  cloud-config-server2:
    build:
      context: ./cloud-config-server
    container_name: cloud-config-server2
    ports:
      - "8889:8889"
    depends_on:
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: local
      SERVER_PORT: 8889
    restart: on-failure:10

  admin-server:
    build:
      context: ./admin-server
    container_name: admin-server
    ports:
      - "8081:8081"
    depends_on:
      - kafka1
      - kafka2
      - kafka-init
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: local
      SERVER_PORT: 8081
    restart: on-failure:10

  service-server:
    build:
      context: ./service-server
    container_name: service-server
    ports:
      - "8080:8080"
    depends_on:
      - cloud-config-server1
      - cloud-config-server2
      - kafka1
      - kafka2
      - kafka-init
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: local

volumes:
  db_data:
